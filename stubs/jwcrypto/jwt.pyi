from _typeshed import Incomplete
from jwcrypto.common import JWException as JWException, JWKeyNotFound as JWKeyNotFound, json_decode as json_decode, json_encode as json_encode
from jwcrypto.jwe import JWE as JWE
from jwcrypto.jwk import JWK as JWK, JWKSet as JWKSet
from jwcrypto.jws import JWS as JWS

JWTClaimsRegistry: Incomplete
JWT_expect_type: bool

class JWTExpired(JWException):
    def __init__(self, message: Incomplete | None = ..., exception: Incomplete | None = ...) -> None: ...

class JWTNotYetValid(JWException):
    def __init__(self, message: Incomplete | None = ..., exception: Incomplete | None = ...) -> None: ...

class JWTMissingClaim(JWException):
    def __init__(self, message: Incomplete | None = ..., exception: Incomplete | None = ...) -> None: ...

class JWTInvalidClaimValue(JWException):
    def __init__(self, message: Incomplete | None = ..., exception: Incomplete | None = ...) -> None: ...

class JWTInvalidClaimFormat(JWException):
    def __init__(self, message: Incomplete | None = ..., exception: Incomplete | None = ...) -> None: ...

class JWTMissingKeyID(JWException):
    def __init__(self, message: Incomplete | None = ..., exception: Incomplete | None = ...) -> None: ...

class JWTMissingKey(JWKeyNotFound):
    def __init__(self, message: Incomplete | None = ..., exception: Incomplete | None = ...) -> None: ...

class JWT:
    deserializelog: Incomplete
    def __init__(self, header: Incomplete | None = ..., claims: Incomplete | None = ..., jwt: Incomplete | None = ..., key: Incomplete | None = ..., algs: Incomplete | None = ..., default_claims: Incomplete | None = ..., check_claims: Incomplete | None = ..., expected_type: Incomplete | None = ...) -> None: ...
    @property
    def header(self): ...
    @header.setter
    def header(self, h) -> None: ...
    @property
    def claims(self): ...
    @claims.setter
    def claims(self, c) -> None: ...
    @property
    def token(self): ...
    @token.setter
    def token(self, t) -> None: ...
    @property
    def leeway(self): ...
    @leeway.setter
    def leeway(self, lwy) -> None: ...
    @property
    def validity(self): ...
    @validity.setter
    def validity(self, v) -> None: ...
    @property
    def expected_type(self): ...
    @expected_type.setter
    def expected_type(self, v) -> None: ...
    def norm_typ(self, val): ...
    def make_signed_token(self, key) -> None: ...
    def make_encrypted_token(self, key) -> None: ...
    def validate(self, key) -> None: ...
    def deserialize(self, jwt, key: Incomplete | None = ...) -> None: ...
    def serialize(self, compact: bool = ...): ...
    @classmethod
    def from_jose_token(cls, token): ...
    def __eq__(self, other): ...
